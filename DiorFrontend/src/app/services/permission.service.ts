import { Injectable } from '@angular/core';
import { AuthService } from './auth.service';

/**
 * üîπ √âTAPE 6 - Service de permissions
 * Ce service propose des m√©thodes sp√©cifiques pour v√©rifier les permissions
 * de mani√®re centralis√©e sans noms cod√©s en dur dans les composants
 */
@Injectable({
  providedIn: 'root'
})
export class PermissionService {

  constructor(private authService: AuthService) {}

  /**
   * V√©rifie si l'utilisateur peut acc√©der au chat PartyKit
   * @returns boolean
   */
  canUsePartyKit(): boolean {
    return this.authService.hasAccess('PARTYKIT_ACCESS');
  }

  /**
   * V√©rifie si l'utilisateur peut g√©rer les contrats
   * @returns boolean
   */
  canManageContracts(): boolean {
    return this.authService.hasAccess('CONTRACT_MANAGEMENT');
  }

  /**
   * V√©rifie si l'utilisateur peut g√©rer les utilisateurs
   * @returns boolean
   */
  canManageUsers(): boolean {
    return this.authService.hasAccess('USER_MANAGEMENT');
  }

  /**
   * V√©rifie si l'utilisateur peut g√©rer les r√¥les
   * @returns boolean
   */
  canManageRoles(): boolean {
    return this.authService.hasAccess('ROLE_MANAGEMENT');
  }

  /**
   * V√©rifie si l'utilisateur est administrateur syst√®me
   * @returns boolean
   */
  isSystemAdmin(): boolean {
    return this.authService.hasAccess('SYSTEM_ADMIN');
  }

  /**
   * V√©rifie si l'utilisateur peut voir les logs d'audit
   * @returns boolean
   */
  canViewAuditLogs(): boolean {
    return this.authService.hasAccess('AUDIT_LOG_VIEW');
  }

  /**
   * V√©rifie si l'utilisateur peut g√©rer les badges
   * @returns boolean
   */
  canManageBadges(): boolean {
    return this.authService.hasAccess('BADGE_MANAGEMENT');
  }

  /**
   * V√©rifie si l'utilisateur peut g√©rer les notifications
   * @returns boolean
   */
  canManageNotifications(): boolean {
    return this.authService.hasAccess('NOTIFICATION_MANAGEMENT');
  }

  /**
   * V√©rifie si l'utilisateur a un acc√®s administrateur g√©n√©ral
   * @returns boolean
   */
  hasAdminAccess(): boolean {
    return this.authService.hasAccess('SYSTEM_ADMIN') || 
           this.authService.hasAccess('USER_MANAGEMENT') || 
           this.authService.hasAccess('ROLE_MANAGEMENT');
  }

  /**
   * M√©thode g√©n√©rique pour v√©rifier une permission personnalis√©e
   * @param permissionName - Nom de la permission √† v√©rifier
   * @returns boolean
   */
  hasCustomPermission(permissionName: string): boolean {
    return this.authService.hasAccess(permissionName);
  }
}
